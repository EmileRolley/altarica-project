/* nbSensors : the number of sensors
*  nbSensors must be greater or equal to 4
*/
const nbSensors = 4;

/* nbFailures : the maximum number if failures (0, 1, 2 or 3)
*  nbFailures is use to limit the reachables configurations
*/
const nbFailures = 3;
node Valve
  state rate : [0,2] : public;
        stucked : [0,1] : public;
  init  rate := 0;
        stucked := 0;
  event dec, inc;
  trans stucked=0 |- dec -> rate := rate - 1;
        stucked=0 |- inc -> rate := rate + 1;
	stucked=0 & rate=0 |- dec -> ;
	stucked=0 & rate=2 |- inc -> ;
        /* a problem may appear */
        stucked=0 |- dec, inc -> stucked := 1;
	/* After the failure, the valve is stuck */
	stucked=1 |- dec, inc -> ;
edon
/* A  virtual valse is use by the controller :
*  - to simulate a perfect valve
*  - to stop the use of a valve when it is stuck
*/
node ValveVirtual
  state rate : [0,2] : public;
  /* information given via the controller
  *  rate different from rateReal means that this valve is stuck.
  *  so there is no need to use it any more 
  */
  flow  rateReal : [0,2];
  init  rate := 0;
  event dec, inc;
  trans rate=rateReal |- dec -> rate := rate - 1;
        rate=rateReal |- inc -> rate := rate + 1;
edon
node Tank
  state level : [0,nbSensors] : public;
  init  level := nbSensors/2;
  flow  input : [0,4];
        output : [0,2];
  event time;
  trans input>output |- time -> level := level + 1;
        input<output |- time -> level := level - 1;
        input=output & input=0 |- time -> ;
        input=output & input>0 |- time -> level := level - 1;
        input=output & input>0 |- time -> ;
        input=output & input>0 |- time -> level := level + 1;
	/* To avoid deadlocks */
	input>output & level=nbSensors |- time -> ;
	input<output & level=0 |- time -> ;
edon
/*
 * This node is the result of the projection of the node 'System3FCtrlVV3F2I'
 * on its subnode 'CtrlVV3F2I'.
 */
node CtrlVV3F3I_Opt
 flow
  rate : [0, 2][3];
  level : [0, 4];
 event
  nnn;
  nni;
  nnd;
  nin;
  nii;
  nid;
  ndn;
  ndi;
  ndd;
  inn;
  ini;
  ind;
  iin;
  iii;
  iid;
  idn;
  idi;
  idd;
  dnn;
  dni;
  dnd;
  din;
  dii;
  did;
  ddn;
  ddi;
  ddd;
 sub
  V : ValveVirtual[3];
 assert
  V[0].rateReal=rate[0];
  V[1].rateReal=rate[1];
  V[2].rateReal=rate[2];
 sync
  <ddd, V[0].dec, V[1].dec, V[2].dec>;
  <ddi, V[0].dec, V[1].dec, V[2].inc>;
  <ddn, V[0].dec, V[1].dec>;
  <did, V[0].dec, V[1].inc, V[2].dec>;
  <dii, V[0].dec, V[1].inc, V[2].inc>;
  <din, V[0].dec, V[1].inc>;
  <dnd, V[0].dec, V[2].dec>;
  <dni, V[0].dec, V[2].inc>;
  <dnn, V[0].dec>;
  <idd, V[0].inc, V[1].dec, V[2].dec>;
  <idi, V[0].inc, V[1].dec, V[2].inc>;
  <idn, V[0].inc, V[1].dec>;
  <iid, V[0].inc, V[1].inc, V[2].dec>;
  <iii, V[0].inc, V[1].inc, V[2].inc>;
  <iin, V[0].inc, V[1].inc>;
  <ind, V[0].inc, V[2].dec>;
  <ini, V[0].inc, V[2].inc>;
  <inn, V[0].inc>;
  <ndd, V[1].dec, V[2].dec>;
  <ndi, V[1].dec, V[2].inc>;
  <ndn, V[1].dec>;
  <nid, V[1].inc, V[2].dec>;
  <nii, V[1].inc, V[2].inc>;
  <nin, V[1].inc>;
  <nnd, V[2].dec>;
  <nni, V[2].inc>;
  <nnn>;
/* Existential transitions */
/* Universal transitions */
 trans
  0<=V[2].rate and V[2].rate<=1 and V[2].rateReal=0 and level=2 and 0<=V[1].rate and V[1].rate<=1 and V[1].rateReal=0 and 0<=V[0].rate and V[0].rate<=1 and V[0].rateReal=0 and (((((1<=level and level<=3 and 0<=V[2].rate and V[2].rate<=1 and V[2].rateReal=0 or 2<=level and level<=3 and V[2].rateReal=1 or (level=3 and V[2].rate=1 or 2<=level and level<=3 and V[2].rate=2) and V[2].rateReal=2) and V[1].rate=0 or (1<=level and level<=3 and 0<=V[2].rate and V[2].rate<=1 and V[2].rateReal=0 or (level=3 and V[2].rate=0 or 2<=level and level<=3 and V[2].rate=1 or level=3 and V[2].rate=2) and V[2].rateReal=1 or level=3 and V[2].rate=2 and V[2].rateReal=2) and V[1].rate=1) and V[1].rateReal=0 or ((level=1 and V[2].rate=0 and V[2].rateReal=0 or level=2 and V[2].rate=1 and V[2].rateReal=1 or (level=3 and V[2].rate=1 or 2<=level and level<=3 and V[2].rate=2) and V[2].rateReal=2) and V[1].rate=0 or (1<=level and level<=2 and 0<=V[2].rate and V[2].rate<=1 and V[2].rateReal=0 or level=2 and V[2].rateReal=1 or 2<=level and level<=3 and 1<=V[2].rate and V[2].rate<=2 and V[2].rateReal=2) and V[1].rate=1 or (level=1 and V[2].rate=0 and V[2].rateReal=0 or level=2 and V[2].rate=1 and V[2].rateReal=1 or (level=3 and V[2].rate=1 or 2<=level and level<=3 and V[2].rate=2) and V[2].rateReal=2) and V[1].rate=2) and V[1].rateReal=1 or (level=1 and V[2].rate=0 and V[2].rateReal=0 or (level=1 and V[2].rate=0 or 1<=level and level<=2 and V[2].rate=1 or level=1 and V[2].rate=2) and V[2].rateReal=1 or level=2 and 1<=V[2].rate and V[2].rate<=2 and V[2].rateReal=2) and V[1].rate=2 and V[1].rateReal=2) and V[0].rate=0 or (((1<=level and level<=3 and 0<=V[2].rate and V[2].rate<=1 and V[2].rateReal=0 or (level=3 and V[2].rate=0 or 2<=level and level<=3 and V[2].rate=1 or level=3 and V[2].rate=2) and V[2].rateReal=1 or level=3 and V[2].rate=2 and V[2].rateReal=2) and V[1].rate=0 or (1<=level and level<=3 and 0<=V[2].rate and V[2].rate<=1 and V[2].rateReal=0 or 2<=level and level<=3 and V[2].rate=1 and V[2].rateReal=1) and V[1].rate=1) and V[1].rateReal=0 or ((level=1 and V[2].rate=0 and V[2].rateReal=0 or level=2 and V[2].rate=1 and V[2].rateReal=1 or level=3 and V[2].rate=2 and V[2].rateReal=2) and V[1].rate=0 or (1<=level and level<=2 and 0<=V[2].rate and V[2].rate<=1 and V[2].rateReal=0 or level=2 and V[2].rateReal=1 or 2<=level and level<=3 and V[2].rate=2 and V[2].rateReal=2) and V[1].rate=1 or (level=1 and V[2].rate=0 and V[2].rateReal=0 or level=2 and V[2].rate=1 and V[2].rateReal=1 or level=3 and V[2].rate=2 and V[2].rateReal=2) and V[1].rate=2) and V[1].rateReal=1 or (level=1 and V[2].rate=0 and V[2].rateReal=0 or (level=1 and V[2].rate=0 or 1<=level and level<=2 and V[2].rate=1 or level=1 and V[2].rate=2) and V[2].rateReal=1 or level=2 and V[2].rate=2 and V[2].rateReal=2) and V[1].rate=2 and V[1].rateReal=2) and V[0].rate=1) and V[0].rateReal=0 or ((((level=1 and V[2].rate=0 and V[2].rateReal=0 or level=2 and V[2].rate=1 and V[2].rateReal=1 or (level=3 and V[2].rate=1 or 2<=level and level<=3 and V[2].rate=2) and V[2].rateReal=2) and V[1].rate=0 or (level=1 and V[2].rate=0 and V[2].rateReal=0 or level=2 and V[2].rate=1 and V[2].rateReal=1 or level=3 and V[2].rate=2 and V[2].rateReal=2) and V[1].rate=1) and V[1].rateReal=0 or (level=1 and V[2].rate=0 and V[2].rateReal=0 or 1<=level and level<=2 and V[2].rate=1 and V[2].rateReal=1 or level=2 and 1<=V[2].rate and V[2].rate<=2 and V[2].rateReal=2) and V[1].rate=1 and V[1].rateReal=1 or (level=1 and V[2].rate=1 and V[2].rateReal=1 or level=1 and 1<=V[2].rate and V[2].rate<=2 and V[2].rateReal=2) and V[1].rate=2 and V[1].rateReal=2) and V[0].rate=0 or (((1<=level and level<=2 and 0<=V[2].rate and V[2].rate<=1 and V[2].rateReal=0 or level=2 and V[2].rateReal=1 or 2<=level and level<=3 and 1<=V[2].rate and V[2].rate<=2 and V[2].rateReal=2) and V[1].rate=0 or (1<=level and level<=2 and 0<=V[2].rate and V[2].rate<=1 and V[2].rateReal=0 or level=2 and V[2].rateReal=1 or 2<=level and level<=3 and V[2].rate=2 and V[2].rateReal=2) and V[1].rate=1) and V[1].rateReal=0 or ((level=1 and V[2].rate=0 and V[2].rateReal=0 or 1<=level and level<=2 and V[2].rate=1 and V[2].rateReal=1 or level=2 and 1<=V[2].rate and V[2].rate<=2 and V[2].rateReal=2) and V[1].rate=0 or (1<=level and level<=2 and 0<=V[2].rate and V[2].rate<=1 and V[2].rateReal=0 or 1<=level and level<=2 and V[2].rateReal=1 or level=2 and 1<=V[2].rate and V[2].rate<=2 and V[2].rateReal=2) and V[1].rate=1 or (level=1 and V[2].rate=0 and V[2].rateReal=0 or 1<=level and level<=2 and V[2].rate=1 and V[2].rateReal=1 or level=2 and 1<=V[2].rate and V[2].rate<=2 and V[2].rateReal=2) and V[1].rate=2) and V[1].rateReal=1 or (level=1 and V[2].rate=0 and V[2].rateReal=0 or (level=1 and V[2].rate=0 or 1<=level and level<=2 and V[2].rate=1 or level=1 and V[2].rate=2) and V[2].rateReal=1 or 1<=level and level<=2 and 1<=V[2].rate and V[2].rate<=2 and V[2].rateReal=2) and V[1].rate=2 and V[1].rateReal=2) and V[0].rate=1 or (((level=1 and V[2].rate=0 and V[2].rateReal=0 or level=2 and V[2].rate=1 and V[2].rateReal=1 or (level=3 and V[2].rate=1 or 2<=level and level<=3 and V[2].rate=2) and V[2].rateReal=2) and V[1].rate=0 or (level=1 and V[2].rate=0 and V[2].rateReal=0 or level=2 and V[2].rate=1 and V[2].rateReal=1 or level=3 and V[2].rate=2 and V[2].rateReal=2) and V[1].rate=1) and V[1].rateReal=0 or (level=1 and V[2].rate=0 and V[2].rateReal=0 or 1<=level and level<=2 and V[2].rate=1 and V[2].rateReal=1 or level=2 and 1<=V[2].rate and V[2].rate<=2 and V[2].rateReal=2) and V[1].rate=1 and V[1].rateReal=1 or (level=1 and V[2].rate=1 and V[2].rateReal=1 or level=1 and 1<=V[2].rate and V[2].rate<=2 and V[2].rateReal=2) and V[1].rate=2 and V[1].rateReal=2) and V[0].rate=2) and V[0].rateReal=1 or (((level=1 and V[2].rate=0 and V[2].rateReal=0 or (level=1 and V[2].rate=0 or 1<=level and level<=2 and V[2].rate=1 or level=1 and V[2].rate=2) and V[2].rateReal=1 or level=2 and 1<=V[2].rate and V[2].rate<=2 and V[2].rateReal=2) and V[1].rate=0 or (level=1 and V[2].rate=0 and V[2].rateReal=0 or (level=1 and V[2].rate=0 or 1<=level and level<=2 and V[2].rate=1 or level=1 and V[2].rate=2) and V[2].rateReal=1 or level=2 and V[2].rate=2 and V[2].rateReal=2) and V[1].rate=1) and V[1].rateReal=0 or ((level=1 and V[2].rate=1 and V[2].rateReal=1 or level=1 and 1<=V[2].rate and V[2].rate<=2 and V[2].rateReal=2) and V[1].rate=0 or (level=1 and V[2].rate=0 and V[2].rateReal=0 or (level=1 and V[2].rate=0 or 1<=level and level<=2 and V[2].rate=1 or level=1 and V[2].rate=2) and V[2].rateReal=1 or 1<=level and level<=2 and 1<=V[2].rate and V[2].rate<=2 and V[2].rateReal=2) and V[1].rate=1 or (level=1 and V[2].rate=1 and V[2].rateReal=1 or level=1 and 1<=V[2].rate and V[2].rate<=2 and V[2].rateReal=2) and V[1].rate=2) and V[1].rateReal=1 or (level=1 and V[2].rate=1 and V[2].rateReal=1 or level=1 and 1<=V[2].rate and V[2].rate<=2 and V[2].rateReal=2) and V[1].rate=2 and V[1].rateReal=2) and V[0].rate=2 and V[0].rateReal=2) |- 'nnn' -> ;

event
  /* 
   * les priorites dependent des actions sur la vanne aval
   * inc > nop > dec
   */
  {ddi, dii, dni, idi, iii, ini, ndi, nii, nni} >
    {ddn, din, dnn, idn, iin, inn, ndn, nin, nnn};
  {ddn, din, dnn, idn, iin, inn, ndn, nin, nnn} >
    {ddd, did, dnd, idd, iid, ind, ndd, nid, nnd};
edon
node System3FCtrlVV3F3I_Opt
  sub   V : Valve[3];
        T : Tank;
	C : CtrlVV3F3I_Opt;
  assert T.input = (V[0].rate + V[1].rate);
         T.output = V[2].rate;
	 /* les observations du controleurs */
	 C.rate[0] = V[0].rate;
	 C.rate[1] = V[1].rate;
	 C.rate[2] = V[2].rate;
	 C.level = T.level;
	 /* to limit the number of failures */
	 nbFailures >= (V[0].stucked + V[1].stucked + V[2].stucked);
  state ctrl : bool;
  init  ctrl := true;
  event env, cmd;
  trans ctrl |- cmd -> ctrl := false;
        ~ctrl |- env -> ctrl := true;
  sync  <env, T.time>;
        <C.ddd, cmd, V[0].dec, V[1].dec, V[2].dec>;
        <C.ddi, cmd, V[0].dec, V[1].dec, V[2].inc>;
        <C.ddn, cmd, V[0].dec, V[1].dec>;
        <C.did, cmd, V[0].dec, V[1].inc, V[2].dec>;
        <C.dii, cmd, V[0].dec, V[1].inc, V[2].inc>;
        <C.din, cmd, V[0].dec, V[1].inc>;
        <C.dnd, cmd, V[0].dec, V[2].dec>;
        <C.dni, cmd, V[0].dec, V[2].inc>;
        <C.dnn, cmd, V[0].dec>;
        <C.idd, cmd, V[0].inc, V[1].dec, V[2].dec>;
        <C.idi, cmd, V[0].inc, V[1].dec, V[2].inc>;
        <C.idn, cmd, V[0].inc, V[1].dec>;
        <C.iid, cmd, V[0].inc, V[1].inc, V[2].dec>;
        <C.iii, cmd, V[0].inc, V[1].inc, V[2].inc>;
        <C.iin, cmd, V[0].inc, V[1].inc>;
        <C.ind, cmd, V[0].inc, V[2].dec>;
        <C.ini, cmd, V[0].inc, V[2].inc>;
        <C.inn, cmd, V[0].inc>;
        <C.ndd, cmd, V[1].dec, V[2].dec>;
        <C.ndi, cmd, V[1].dec, V[2].inc>;
        <C.ndn, cmd, V[1].dec>;
        <C.nid, cmd, V[1].inc, V[2].dec>;
        <C.nii, cmd, V[1].inc, V[2].inc>;
        <C.nin, cmd, V[1].inc>;
        <C.nnd, cmd, V[2].dec>;
        <C.nni, cmd, V[2].inc>;
        <C.nnn, cmd>;
edon
